#!/usr/bin/env php
<?php
require(__DIR__."/SLGTerm/autoload.php");

use SLGTerm\Form;
use SLGTerm\Box;
use SLGTerm\Terminal;
use SLGTerm\Cursor;
use SLGTerm\Input;
use SLGTerm\Label;
use SLGTerm\TextInput;
use SLGTerm\ListInput;
use SLGTerm\ListItem;
use SLGTerm\Style;

return main();


function main() {

    // Save screen and restore at the end.
    $original_cursor_position = Cursor::getPosition();
    Terminal::saveContents();
    Cursor::showOnExit();

    $app = create_main_form();

    $app->show();
    $app->focus();

    Terminal::restoreContents();
    Cursor::setPosition($original_cursor_position);

    return 0;
}

function create_main_form() {

    $app = new Form();

    $Box = new Box(); // Fullscreen by default
    set_default_colors($Box);

    $app->addWidget($Box); // Use as form background, useful for clean redraws

    $FilterLabel = (new Label("Filter:", 0, 0, 7));
    set_default_colors($FilterLabel);

    $app->addWidget($FilterLabel);

    $Report = (new Label("", 35, 0, 45));
    set_alert_colors($Report);

    $app->addWidget($Report);
    $app->report = $Report;

    $StatusBar = (new Label(" <C>: SIGINT.  <E>: SIGTERM.  <9>: SIGKILL. </>: Filter.  <ESC>, <Q>: Quit pskill. <J>, <K>, <UP>, <DOWN>: Navigate processes. "));
    set_info_colors($StatusBar);

    $app->addWidget($StatusBar);

    $app->on("key", function( $event ) {
        $key = $event->getData('key');
        if($key == "<ESC>") {
            $event->getData('controller')->hide();
        }
    });

    $app->on("key", function( $event ) use ($app) {
        $key = $event->getData('key');
        if($key == "<TAB>") {
            $event->getData('controller')->focusNext();
        } elseif($key == "<HOME>") {
            $event->getData('controller')->focusPrevious();
        } elseif($key == "<F5>") {
            load_running_processes($app);
        } elseif($key == "<ENTER>") {
            $app->focusWidget( $app->processList );
        }
    });

    $ProcessList = new ListInput();

    $app->addWidget($ProcessList);

    $app->processList = $ProcessList;

    $ProcessList->setKeys(
        [
            "<UP>",
            "k",
        ],
        [
            "<DOWN>",
            "j",
        ]
    );

    $ProcessList->on("key", function( $event ) use ($app) {
        $key = $event->getData('key');
        if(strtolower($key) == "q") {
            $app->hide();
        } elseif($key == "c") {
            $pid = $app->processList->getValue();
            if (!empty(intval($pid))) {
                $focusedIndex = $app->processList->getFocusedIndex();
                kill_pid($pid, "-INT");
                load_running_processes($app);
                $app->processList->setFocusedIndex($focusedIndex);
                $app->report->setValue("SIGINT sent to process ".$pid.".")->render();
            }
        } elseif($key == "e") {
            $pid = $app->processList->getValue();
            if (!empty(intval($pid))) {
                $focusedIndex = $app->processList->getFocusedIndex();
                kill_pid($pid);
                load_running_processes($app);
                $app->processList->setFocusedIndex($focusedIndex);
                $app->report->setValue("SIGTERM sent to process ".$pid.".")->render();
            }
        } elseif($key == "9") {
            $pid = $app->processList->getValue();
            if (!empty(intval($pid))) {
                $focusedIndex = $app->processList->getFocusedIndex();
                kill_pid($pid, "-9");
                load_running_processes($app);
                $app->processList->setFocusedIndex($focusedIndex);
                $app->report->setValue("SIGKILL sent to process ".$pid.".")->render();
            }
        } elseif($key == "/") {
            $app->focusWidget( $app->filter );
        }
    });

    set_list_colors($ProcessList);

    $ProcessList->on("input", function( $event ) use ($StatusBar, $ProcessList) {
        $key = $event->getData('key');
        //$StatusBar->setValue("w: ".$ProcessList->getWidth()." key: ".$key." ".json_encode($event->getData()))->render();
    });

    $Filter = (new TextInput())
        ->style(new Style(null, "cyan"))
        ->styleFocused((new Style(null, "cyan"))->underline()->bold())
        ->setCol(8)
        ->setRow(0)
        ->setWidth(25);

    $app->addWidget($Filter);

    $app->filter = $Filter;

    $resizer = function() use ($app, $Box, $StatusBar, $Filter, $ProcessList) {
        $Box
            ->setCol(0)
            ->setRow(0)
            ->setHeight(Terminal::rows())
            ->setWidth(Terminal::cols());

        $StatusBar
            ->setCol(0)
            ->setRow(Terminal::rows())
            ->setWidth(Terminal::cols());

        $ProcessList
            ->setCol(0)
            ->setRow(2)
            ->setHeight(Terminal::rows()-2)
            ->setWidth(Terminal::cols());

    };

    $resizer();

    add_resize_event($app);

    // Subscribe resizer to resize event on terminal.
    $app->on("resize", function() use($app, $resizer) {
        $resizer();
        $app->render();
    });

    $app->processes = [];

    load_running_processes($app);

    $Filter->on("input", function($event) use($app) {
        $filter = $app->filter->getValue();
        filter_processes($app, $filter);
        $app->render();
    });

    return $app;

}

function load_running_processes($app) {
    $app->processes = [];
    exec("ps aux", $app->processes);

    // reapply current filter
    filter_processes($app, $app->filter->getValue());
}

function filter_processes($app, $filter_string) {
    $app->processList->setFocusedIndex(0);

    if ( $filter_string == "" ) {
        populate_list($app->processes, $app->processList);
        return;
    }

    $lowercase_filter_string = strtolower($filter_string);
    $filtered = array_filter($app->processes,
        function($el) use ($lowercase_filter_string) {
            return strpos(strtolower($el), $lowercase_filter_string) > -1;
        }
    );
    populate_list($filtered, $app->processList);
}

function set_default_colors($widget) {
    $style = new Style('white', 'black', 250, 235);
    $widget->style($style);
}

function set_alert_colors($widget) {
    $style = new Style('red', 'black', 160, 235);
    $widget->style($style);
}

function set_list_colors($widget) {
    // Widget style when not focused
    $style = new Style('white', 'black', 250, 236);

    // Widget style when focused
    $styleFocused = new Style('yellow', 'black', 253, 241);

    // Selected element in list when not focused
    $styleSelectedItem = new Style('black', 'white', 235, 250);

    // Selected element in list when focused
    $styleSelectedItemFocused = (new Style('black', 'white', 235, 253))->bold()->underline();

    $widget->style($style);
    $widget->styleFocused($styleFocused);
    $widget->styleSelectedItem($styleSelectedItem);
    $widget->styleSelectedItemFocused($styleSelectedItemFocused);
}

function set_info_colors($widget) {
    $style = new Style('white', 'blue', 255, 27);
    $widget->style($style);
}


function populate_list($items, $List) {
    $List->truncate();
    foreach ($items as $item) {
        $List->add( new ListItem($item, extract_pid($item)) );
    }
    $List->render();
}

function extract_pid($process_string) {
    $vals = array_values(array_filter(explode(" ",$process_string)));
    return $vals[1];
}

function add_resize_event(\SLGTerm\Form $app) {

    Input::setInterval(function () use ($app) {
        // Intervals and Timeouts only work while a
        // Form object ($app for example) has the focus.

        // Keep track of terminal dimensions
        static $cols;
        if (is_null($cols)) {
            $cols = Terminal::cols();
        }

        static $rows;
        if (is_null($rows)) {
            $rows = Terminal::rows();
        }

        if( $cols != Terminal::cols() || $rows != Terminal::rows()) {

            $oldDimensions = [ "cols" => $cols, "rows" => $rows ];
            $cols = Terminal::cols();
            $rows = Terminal::rows();
            $newDimensions = [ "cols" => $cols, "rows" => $rows ];

            $data = ["oldDimensions"=>$oldDimensions, "newDimensions"=>$newDimensions];

            // Can easily integrate with objects if we make them emit an event
            $app->emit("resize", $data);

        }

    } , 1000); // query once per second

}

function kill_pid($pid, $signal = "") {
    exec("kill ".$signal." ".$pid);
}
