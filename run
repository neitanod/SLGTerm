#!/usr/bin/env php
<?php
require("SLGTerm/SLGTerm.php");
require("SLGTerm/Terminal.php");
require("SLGTerm/Cursor.php");
require("SLGTerm/Label.php");
require("SLGTerm/Spinner.php");
require("SLGTerm/Input.php");

use SLGTerm\box;
use SLGTerm\Form;
use SLGTerm\Terminal;
use SLGTerm\Terminal as T;
use SLGTerm\Cursor;
use SLGTerm\TextInput;
use SLGTerm\Label;
use SLGTerm\Spinner;
use SLGTerm\Input;


return main();


function main() {
    // Save screen and restore at the end.
    $original_cursor_position = Cursor::getPosition();
    Terminal::saveContents();

    $user_name = show_name_form();

    Terminal::restoreContents();
    Cursor::setPosition($original_cursor_position);

    echo "Hello ".$user_name."!!\n";

    return 0;
}


function show_name_form() {

    $app = new Form();

    $StatusBar = (new Label("", 0, Terminal::rows(), Terminal::cols(), Terminal::cols()))
        ->bgColor("green")
        ->fgColor("black")
        ->render();

    $StatusBar2 = (new Label("", 0, Terminal::rows()-1, Terminal::cols(), Terminal::cols()))
        ->bgColor("white")
        ->fgColor("green")
        ->render();

    $app->on("key", function( $event ) use ($StatusBar) {
        $key = $event->getData('key');
        $StatusBar->setValue("key: ".$key." ".json_encode($event->getData()))
            ->render();
    });

    $app->on("key", function( $event ) {
        $key = $event->getData('key');
        if($key == "<esc>") {
            $event->getData('controller')->exit = true;
        }
    });

    $Label1 = (new Label(" Enter your name: ", 3, 3))
        ->bgColor("green")
        ->fgColor("black");

    $TextInput1 = (new TextInput( 22, 3))
        ->bgColor("cyan");
        //->width(25);

    $TextInput1->on("input", function( $event ) use ($StatusBar2, $TextInput1) {
        $StatusBar2->setValue($event->getData('value'))->render();
        $TextInput1->render();
    });

    $app->addWidget($TextInput1);
    $app->addWidget($Label1);

    $app->focus();

    return $TextInput1->getValue();

}














exit;

// Terminal::clear();
// Terminal::home();

// Terminal::bell();


/* */
//Terminal::echoAt(9, 20, "Your name: ");
//$TextInput1 = (new TextInput(20, 20));

//echo("Enter your name: ");

// $Box = (new Box())
//     ->render();

$Label = (new Label(" Enter your name: ", 3, 3))
    ->bgColor("green")
    ->fgColor("black")
    ->render();

echo(" ");

$TextInput1 = (new TextInput( 22, 3))
    ->bgColor("cyan");
    //->width(25);

$TextInput1

    ->on("input",
        function() {
            static $count=0;
            $count++;
            Terminal::echoAt(3, 5, "Input events: ".$count);
        })


    ->on("input",
        function($event) use ($TextInput1) {
            Terminal::clearLine( 10 );
            Terminal::echoAt( 10, 10,
                "Input so far: " . $event->getData("value") .
                " (From TextInput->value: " . $TextInput1->getValue() . ")" );
        })


    ->onInterval(1000,
        function($event) use ($TextInput1) {
            Terminal::clearLine( 10 );
            Terminal::echoAt( 10, 11, "Interval: ".date());
        })


    ->onTimeout(5000,
        function($event) use ($TextInput1) {
            Terminal::clearLine( 10 );
            Terminal::echoAt( 10, 12, "Timed out: ".date());
        });


$your_name = $TextInput1->render()->focus();
$your_name = $TextInput1->getValue();


// move to line 25 and clear the lower half of the screen
//Cursor::move(3, 25);
//Terminal::clearDown();

Cursor::move(3, 30);

echo("Hello, {$your_name}!!\n");

$Label->render();
$your_name = $TextInput1->focus();

Cursor::move(0, 30);
//Terminal::clearDown();


Terminal::restoreContents();
Cursor::setPosition($original_cursor_position);

echo("Hello, {$your_name}!!\n");

exit();





/* */

T::echoln("Is CLI: " . T::isCli());
T::echoln("Is TTY: " . T::isTTY());
T::echoln("Is piped: " . T::isPiped());
T::echoln("Cols: " . T::cols());

T::echoln("Cols: " . T::cols());
T::echoln("Rows: " . T::rows());
T::echoln("Colors: " . T::colors());

$position = Cursor::getPosition();

T::echoln("Cursor Position: col:". $position['col'] . ", row: ". $position['row']);

Cursor::up(15);
Cursor::save();

$position = Cursor::getPosition();

T::echoln("Cursor Position: col:". $position['col'] . ", row: ". $position['row']);

$char = T::read();

$input = T::readln();

T::echoln("Pressed key was: ".$char);
T::echoln("Input text was: ".$input);

Cursor::restore();
T::echoln("@@@");

Cursor::move(20,20);
$input = T::input(
    [
        'callbacks' => [
            27 => function($key, &$input) {T::echoln("Input so far:".$input); return true;},
            9 => function()  {echo "T";},
        ],
        //'echo' => false,
    ]
);
T::echoln("Input text was: ".$input);
